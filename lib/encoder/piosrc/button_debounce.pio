.program button_debounce

    jmp pin isone   ; executed only once: is the gpio currently 0 or 1?
iszero:
    wait 1 pin 0    ; the gpio is 0, wait for it to become 1
    set y 31        ; prepare to test the gpio for 31 * 2 clock cycles
checkzero:
    jmp pin stillone; check if the gpio is still 1
    jmp iszero      ; if the gpio has returned to 0, start over
stillone:
    jmp y-- checkzero; the decrease the time to wait, or decide it has definitively become 1
isone:
    wait 0 pin 0    ; the gpio is 1, wait for it to become 0
    set y 31        ; prepare to test the gpio for 31 * 2 clock cycles
checkone:
    jmp pin isone   ; if the gpio has returned to 1, start over
    jmp y-- checkone; decrease the time to wait
    jmp iszero      ; the gpio has definitively become 0
	
; the c-code must know where the border between 0 and 1 is in the code:
.define public border isone

% c-sdk {

#include "hardware/clocks.h"
#include "hardware/gpio.h"

static inline void button_debounce_program_init(PIO pio, uint sm, uint pin, uint offset)
{

	pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
    gpio_pull_up(pin);

    pio_sm_config c = button_debounce_program_get_default_config(offset);

    sm_config_set_in_pins(&c, pin); // for WAIT, IN
    sm_config_set_jmp_pin(&c, pin); // for JMP

    sm_config_set_clkdiv(&c, 50000.);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

static inline uint button_debounce_read(PIO pio, uint sm, uint offset)
{
	uint pc = pio_sm_get_pc(pio0, sm);
	// if it is at or beyond the "wait 0 pin 0" it has value 1, else 0
	if (pc >= offset + button_debounce_border) {
		return 1;
	}else {
		return 0;
	}
}

%}